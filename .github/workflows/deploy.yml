# GitHub Actions workflow for continuous deployment to Render
# This workflow builds Docker images and deploys them to Render platform
name: CI/CD to Render

# Define when this workflow should run
on:
  push:
    branches: [ "main" ]   # Trigger on pushes to main branch
  workflow_dispatch:       # Allow manual trigger from GitHub Actions UI

# Define permissions needed for this workflow
permissions:
  contents: read           # Read repository contents
  packages: write          # Push Docker images to GitHub Container Registry (GHCR)
  id-token: write         # Required for OIDC authentication

# Environment variables used throughout the workflow
env:
  BACKEND_IMAGE_NAME: ghcr.io/konstantinosnikas/todo-docker-app-backend    # Backend Docker image name
  FRONTEND_IMAGE_NAME: ghcr.io/konstantinosnikas/todo-docker-app-frontend  # Frontend Docker image name
  TAG_LATEST: latest                                                        # Latest tag for images
  TAG_SHA: ${{ github.sha }}                                               # Git commit SHA as tag

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest    # Use Ubuntu runner for the job

    steps:
      # Step 1: Download source code from repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Authenticate with GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io                    # GitHub Container Registry URL
          username: ${{ github.actor }}        # GitHub username (automatically provided)
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub token for authentication

      # Step 4: Build and push backend Docker image
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./server                    # Build context is the server directory
          push: true                          # Push the image to registry after building
          platforms: linux/amd64             # Target platform for the image
          tags: |                             # Tags to apply to the built image
            ${{ env.BACKEND_IMAGE_NAME }}:${{ env.TAG_LATEST }}
            ${{ env.BACKEND_IMAGE_NAME }}:${{ env.TAG_SHA }}
          cache-from: type=gha,scope=backend  # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max,scope=backend  # Save build cache for future builds

      # Step 5: Build and push frontend Docker image
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./client                   # Build context is the client directory
          file: ./client/Dockerfile          # Specify Dockerfile location
          push: true                          # Push the image to registry after building
          platforms: linux/amd64             # Target platform for the image
          tags: |                             # Tags to apply to the built image
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.TAG_LATEST }}
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.TAG_SHA }}

      # Optional: Quick smoke test by running the backend image (uncomment if useful)
      # - name: Smoke test backend container
      #   run: |
      #     docker run -d -p 4000:4000 --name backend ${{ env.BACKEND_IMAGE_NAME }}:${{ env.TAG_LATEST }}
      #     sleep 5
      #     docker logs backend
      #     docker stop backend

      # Step 6: Trigger deployment on Render platform
      - name: Trigger Render Deploy
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"  # Send POST request to Render deploy hook URL
